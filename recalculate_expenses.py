#!/usr/bin/env python3
"""
Script to recalculate all expenses after user removal
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from db import get_db
from models import User, Expense, ExpenseAllocation
from sqlalchemy.orm import Session
from datetime import datetime, date
from utils.texts import get_category_name, get_currency_name, format_amount

def recalculate_all_expenses():
    """Recalculate all expenses using current user base"""
    db = next(get_db())
    
    try:
        print("üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã...")
        
        # Get current month
        current_month = datetime.now().replace(day=1).date()
        
        # Get all expenses for current month
        expenses = db.query(Expense).filter(Expense.month == current_month).all()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(expenses)} —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞")
        
        recalculated_count = 0
        
        for expense in expenses:
            print(f"\nüîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥ {expense.id}:")
            print(f"  üí∞ {format_amount(expense.amount, expense.currency)} - {get_category_name(expense.category)}")
            if expense.custom_category_name:
                print(f"  üìù –û–ø–∏—Å–∞–Ω–∏–µ: {expense.custom_category_name}")
            print(f"  üí≥ –û–ø–ª–∞—Ç–∏–ª: {expense.payer.first_name or expense.payer.username or f'User {expense.payer.telegram_id}'}")
            
            # Delete all current allocations for this expense
            deleted_allocations = db.query(ExpenseAllocation).filter(
                ExpenseAllocation.expense_id == expense.id
            ).delete()
            print(f"  üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ {deleted_allocations} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –æ –¥–æ–ª–≥–∞—Ö")
            
            # Recalculate allocations using special split logic
            from services.special_split import calculate_special_split
            allocations = calculate_special_split(db, expense.amount, expense.category, expense.profile_id)
            
            print(f"  üë• –ù–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É {len(allocations)} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:")
            
            # Create new allocations
            for user_id, share_amount in allocations.items():
                # Get user info
                user = db.query(User).filter(User.id == user_id).first()
                user_name = user.first_name or user.username or f'User {user.telegram_id}'
                
                # Convert share_amount to SEK if needed
                if expense.currency.value == 'SEK':
                    share_amount_sek = share_amount
                else:
                    share_amount_sek = share_amount * expense.exchange_rate
                
                allocation = ExpenseAllocation(
                    expense_id=expense.id,
                    user_id=user_id,
                    amount_sek=share_amount_sek,
                    weight_used=1.0
                )
                db.add(allocation)
                
                print(f"    ‚Ä¢ {user_name}: {share_amount_sek:.2f} SEK")
            
            recalculated_count += 1
        
        # Commit all changes
        db.commit()
        print(f"\n‚úÖ –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ {recalculated_count} —Ä–∞—Å—Ö–æ–¥–æ–≤")
        print("üéâ –í—Å–µ –¥–æ–ª–≥–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –±–µ–∑ —É—á–∞—Å—Ç–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        
        # Show summary
        print("\nüìä –°–≤–æ–¥–∫–∞ –ø–æ —Ç–µ–∫—É—â–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º:")
        users = db.query(User).all()
        for user in users:
            user_name = user.first_name or user.username or f'User {user.telegram_id}'
            
            # Calculate user's balance
            paid_expenses = db.query(Expense).filter(
                Expense.payer_id == user.id,
                Expense.month == current_month
            ).all()
            
            allocations = db.query(ExpenseAllocation).join(Expense).filter(
                ExpenseAllocation.user_id == user.id,
                Expense.month == current_month
            ).all()
            
            total_paid = sum(exp.amount_sek for exp in paid_expenses)
            total_owed = sum(allocation.amount_sek for allocation in allocations)
            net_balance = total_paid - total_owed
            
            print(f"  üë§ {user_name}:")
            print(f"    üí≥ –û–ø–ª–∞—á–µ–Ω–æ: {total_paid:.2f} SEK")
            print(f"    üí∏ –î–æ–ª–∂–µ–Ω: {total_owed:.2f} SEK")
            print(f"    ‚öñÔ∏è  –ë–∞–ª–∞–Ω—Å: {net_balance:.2f} SEK")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")
        db.rollback()
        raise
    finally:
        db.close()

def main():
    """Main function"""
    recalculate_all_expenses()

if __name__ == "__main__":
    main()
