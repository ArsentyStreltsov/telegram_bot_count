#!/usr/bin/env python3
"""
Debug script to check why weekend cleaning tasks are not appearing
"""
import os
import sys
from datetime import date, datetime, timedelta
from dotenv import load_dotenv

# Add current directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from db import init_db, get_db
from services.duty_service import DutyService
from models import DutyTask, DutyTaskType

def debug_weekend_tasks():
    """Debug why weekend cleaning tasks are not appearing"""
    print("üîç –û—Ç–ª–∞–¥–∫–∞ –∑–∞–¥–∞—á –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π")
    
    # Initialize database
    init_db()
    db = next(get_db())
    
    try:
        # Get all tasks
        tasks = DutyService.get_all_tasks(db)
        
        print(f"\nüìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ –ë–î: {len(tasks)}")
        
        # Show all tasks
        for task in tasks:
            print(f"  - {task.name} (—Ç–∏–ø: {task.task_type.value}, –≤—ã—Ö–æ–¥–Ω—ã–µ: {task.is_weekend_only}, —á–∞—Å—Ç–æ—Ç–∞: {task.frequency_days} –¥–Ω–µ–π)")
        
        # Check specific weekend dates
        test_dates = [
            date(2025, 9, 6),  # Saturday
            date(2025, 9, 7),  # Sunday
            date(2025, 9, 13), # Saturday
            date(2025, 9, 14), # Sunday
        ]
        
        print(f"\nüìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π:")
        
        for test_date in test_dates:
            is_weekend = test_date.weekday() >= 5
            day_name = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][test_date.weekday()]
            
            print(f"\n{day_name} {test_date.strftime('%d.%m.%Y')} (–≤—ã—Ö–æ–¥–Ω–æ–π: {is_weekend}):")
            
            for task in tasks:
                should_schedule = DutyService._should_schedule_task(task, test_date, is_weekend)
                if should_schedule:
                    print(f"  ‚úÖ {task.name}")
                else:
                    print(f"  ‚ùå {task.name}")
        
        # Check floor cleaning logic specifically
        print(f"\nüßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –ø—ã–ª–µ—Å–æ—Å/–º—ã—Ç—å–µ –ø–æ–ª–æ–≤:")
        
        vacuum_task = next((t for t in tasks if t.name == "–ü—Ä–æ–ø—ã–ª–µ—Å–æ—Å–∏—Ç—å –ø–æ–ª—ã"), None)
        mop_task = next((t for t in tasks if t.name == "–ü–æ–º—ã—Ç—å –ø–æ–ª—ã"), None)
        
        if vacuum_task and mop_task:
            for test_date in test_dates:
                vacuum_should = DutyService._should_schedule_floor_cleaning(vacuum_task, test_date)
                mop_should = DutyService._should_schedule_floor_cleaning(mop_task, test_date)
                
                day_name = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][test_date.weekday()]
                print(f"  {day_name} {test_date.strftime('%d.%m')}: –ø—ã–ª–µ—Å–æ—Å={vacuum_should}, –º—ã—Ç—å–µ={mop_should}")
        else:
            print("  ‚ùå –ó–∞–¥–∞—á–∏ –ø—ã–ª–µ—Å–æ—Å/–º—ã—Ç—å–µ –ø–æ–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()

if __name__ == "__main__":
    debug_weekend_tasks()
