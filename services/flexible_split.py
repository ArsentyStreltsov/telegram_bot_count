#!/usr/bin/env python3
"""
Flexible expense splitting service for "OTHER" category
Allows users to select specific participants for expense splitting
"""

from sqlalchemy.orm import Session
from models import User, Profile, ProfileMember
from typing import Dict, List, Set
from decimal import Decimal

class FlexibleSplitService:
    """Service for flexible expense splitting with participant selection"""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    GROUP_1_IDS = [804085588, 916228993]  # –°–µ–Ω—è + –î–∞—à–∞
    GROUP_2_IDS = [252901018, 350653235, 6379711500]  # –ö–∞—Ç—è + –î–∏–º–∞ + –ú–∏—à–∞

    @classmethod
    def get_all_users(cls, db: Session) -> List[User]:
        """Get all available users"""
        return db.query(User).filter(
            User.telegram_id.in_(cls.GROUP_1_IDS + cls.GROUP_2_IDS)
        ).all()

    @classmethod
    def get_user_by_telegram_id(cls, db: Session, telegram_id: int) -> User:
        """Get user by telegram_id"""
        return db.query(User).filter(User.telegram_id == telegram_id).first()

    @classmethod
    def get_user_name(cls, user: User) -> str:
        """Get user display name"""
        if user.first_name:
            return user.first_name
        elif user.username:
            return user.username
        else:
            return f"User {user.telegram_id}"

    @classmethod
    def calculate_participant_split(cls, db: Session, amount: float, 
                                  selected_participant_ids: Set[int], 
                                  payer_telegram_id: int) -> Dict[int, float]:
        """Calculate split based on selected participants"""
        
        print(f"üîç DEBUG: calculate_participant_split called")
        print(f"üîç DEBUG: amount={amount}, selected_participant_ids={selected_participant_ids}, payer_telegram_id={payer_telegram_id}")
        
        if not selected_participant_ids:
            print("üîç DEBUG: No participants selected")
            return {}
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ –∏–∑ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ª–≥–∞
        participants_without_payer = selected_participant_ids.copy()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
        payer_user = cls.get_user_by_telegram_id(db, payer_telegram_id)
        if payer_user:
            print(f"üîç DEBUG: Payer user: {payer_user.first_name} (ID: {payer_user.id})")
            if payer_user.id in participants_without_payer:
                participants_without_payer.remove(payer_user.id)
                print(f"üîç DEBUG: Removed payer from participants")
        
        if not participants_without_payer:
            print("üîç DEBUG: No participants left after removing payer")
            return {}
        
        print(f"üîç DEBUG: Participants without payer: {participants_without_payer}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ª—é –Ω–∞ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∫—Ä–æ–º–µ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞)
        share_per_participant = amount / len(participants_without_payer)
        print(f"üîç DEBUG: Share per participant: {share_per_participant}")
        
        allocations = {}
        for participant_id in participants_without_payer:
            allocations[participant_id] = share_per_participant
            print(f"üîç DEBUG: Allocation for user_id {participant_id}: {share_per_participant}")
        
        print(f"üîç DEBUG: Final allocations: {allocations}")
        return allocations

    @classmethod
    def calculate_family_split(cls, db: Session, amount: float, 
                             payer_telegram_id: int) -> Dict[int, float]:
        """Calculate split for '–ó–∞ –¥—Ä—É–≥—É—é —Å–µ–º—å—é' - entire amount goes to opposite group"""
        
        print(f"üîç DEBUG: calculate_family_split called with amount={amount}, payer_telegram_id={payer_telegram_id}")
        print(f"üîç DEBUG: GROUP_1_IDS = {cls.GROUP_1_IDS}")
        print(f"üîç DEBUG: GROUP_2_IDS = {cls.GROUP_2_IDS}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–ª–∞—Ç–µ–ª—å—â–∏–∫
        if payer_telegram_id in cls.GROUP_1_IDS:
            # –ü–ª–∞—Ç–µ–ª—å—â–∏–∫ –∏–∑ –≥—Ä—É–ø–ø—ã 1 (–°–µ–Ω—è + –î–∞—à–∞), –≤–µ—Å—å –¥–æ–ª–≥ –Ω–∞ –≥—Ä—É–ø–ø—É 2
            target_group_ids = cls.GROUP_2_IDS
            print(f"üîç DEBUG: –ü–ª–∞—Ç–µ–ª—å—â–∏–∫ –∏–∑ –≥—Ä—É–ø–ø—ã 1, —Ü–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞: {target_group_ids}")
        else:
            # –ü–ª–∞—Ç–µ–ª—å—â–∏–∫ –∏–∑ –≥—Ä—É–ø–ø—ã 2 (–î–∏–º–∞ + –ö–∞—Ç—è + –ú–∏—à–∞), –≤–µ—Å—å –¥–æ–ª–≥ –Ω–∞ –≥—Ä—É–ø–ø—É 1
            target_group_ids = cls.GROUP_1_IDS
            print(f"üîç DEBUG: –ü–ª–∞—Ç–µ–ª—å—â–∏–∫ –∏–∑ –≥—Ä—É–ø–ø—ã 2, —Ü–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞: {target_group_ids}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
        target_users = db.query(User).filter(
            User.telegram_id.in_(target_group_ids)
        ).all()
        
        print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ: {len(target_users)}")
        for user in target_users:
            print(f"üîç DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (ID: {user.id}, telegram_id: {user.telegram_id})")
        
        if not target_users:
            print("‚ùå DEBUG: –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ!")
            return {}
        
        # –î–µ–ª–∏–º —Å—É–º–º—É –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –≤—Å–µ–º–∏ –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ
        share_per_user = amount / len(target_users)
        allocations = {}
        for user in target_users:
            allocations[user.id] = share_per_user
            print(f"üîç DEBUG: –ê–ª–ª–æ–∫–∞—Ü–∏—è –¥–ª—è {user.first_name}: {share_per_user}")
        
        print(f"üîç DEBUG: –ò—Ç–æ–≥–æ–≤—ã–µ –∞–ª–ª–æ–∫–∞—Ü–∏–∏: {allocations}")
        return allocations

    @classmethod
    def get_split_description(cls, split_type: str, selected_participants: List[str] = None) -> str:
        """Get description for split type"""
        
        if split_type == "participants" and selected_participants:
            participant_names = ", ".join(selected_participants)
            return f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {participant_names}"
        elif split_type == "split_families":
            return "–ó–∞ –¥—Ä—É–≥—É—é —Å–µ–º—å—é (–±–µ–∑ –º–æ–µ–π –≥—Ä—É–ø–ø—ã)"
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"

    @classmethod
    def get_participant_selection_text(cls, selected_participants: Set[int], db: Session = None) -> str:
        """Get text showing currently selected participants"""
        if not selected_participants:
            return "üë• –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–∞—Å—Ö–æ–¥–∞:\n\n–ù–∏–∫—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω"
        
        # Map telegram_ids to names
        telegram_to_name = {
            804085588: "–°–µ–Ω—è",
            916228993: "–î–∞—à–∞", 
            350653235: "–î–∏–º–∞",
            252901018: "–ö–∞—Ç—è",
            6379711500: "–ú–∏—à–∞"
        }
        
        participant_names = []
        for telegram_id in selected_participants:
            name = telegram_to_name.get(telegram_id, f"User {telegram_id}")
            participant_names.append(f"‚úÖ {name}")
        
        text = "üë• –í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n\n"
        text += "\n".join(participant_names)
        text += f"\n\n–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(selected_participants)}"
        
        return text
