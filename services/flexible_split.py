#!/usr/bin/env python3
"""
Flexible expense splitting service for "OTHER" category
Allows users to select specific participants for expense splitting
"""

from sqlalchemy.orm import Session
from models import User, Profile, ProfileMember
from typing import Dict, List, Set
from decimal import Decimal

class FlexibleSplitService:
    """Service for flexible expense splitting with participant selection"""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    GROUP_1_IDS = [804085588, 916228993]  # –°–µ–Ω—è + –î–∞—à–∞
    GROUP_2_IDS = [252901018, 350653235, 6379711500]  # –ö–∞—Ç—è + –î–∏–º–∞ + –ú–∏—à–∞

    @classmethod
    def get_all_users(cls, db: Session) -> List[User]:
        """Get all available users"""
        return db.query(User).filter(
            User.telegram_id.in_(cls.GROUP_1_IDS + cls.GROUP_2_IDS)
        ).all()

    @classmethod
    def get_user_by_telegram_id(cls, db: Session, telegram_id: int) -> User:
        """Get user by telegram_id"""
        return db.query(User).filter(User.telegram_id == telegram_id).first()

    @classmethod
    def get_user_name(cls, user: User) -> str:
        """Get user display name"""
        if user.first_name:
            return user.first_name
        elif user.username:
            return user.username
        else:
            return f"User {user.telegram_id}"

    @classmethod
    def calculate_participant_split(cls, db: Session, amount: float, 
                                  selected_participant_telegram_ids: Set[int], 
                                  payer_telegram_id: int) -> Dict[int, float]:
        """Calculate split based on selected participants - only opposite group pays"""
        
        if not selected_participant_telegram_ids:
            return {}
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
        payer_user = cls.get_user_by_telegram_id(db, payer_telegram_id)
        if not payer_user:
            return {}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–ª–∞—Ç–µ–ª—å—â–∏–∫
        if payer_user.telegram_id in cls.GROUP_1_IDS:
            # –ü–ª–∞—Ç–µ–ª—å—â–∏–∫ –∏–∑ –≥—Ä—É–ø–ø—ã 1 (–°–µ–Ω—è + –î–∞—à–∞), –¥–æ–ª–≥ –Ω–∞ –≥—Ä—É–ø–ø—É 2
            opposite_group_ids = cls.GROUP_2_IDS
        else:
            # –ü–ª–∞—Ç–µ–ª—å—â–∏–∫ –∏–∑ –≥—Ä—É–ø–ø—ã 2 (–î–∏–º–∞ + –ö–∞—Ç—è + –ú–∏—à–∞), –¥–æ–ª–≥ –Ω–∞ –≥—Ä—É–ø–ø—É 1
            opposite_group_ids = cls.GROUP_1_IDS
        
        # –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã
        opposite_group_participants = []
        for participant_telegram_id in selected_participant_telegram_ids:
            if participant_telegram_id in opposite_group_ids:
                participant_user = db.query(User).filter(User.telegram_id == participant_telegram_id).first()
                if participant_user:
                    opposite_group_participants.append(participant_user.id)
        
        if not opposite_group_participants:
            # –ï—Å–ª–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã, –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–ª–∂–µ–Ω
            return {}
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ª—é –Ω–∞ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã
        # –î–µ–ª–∏–º —Å—É–º–º—É –Ω–∞ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–æ –¥–æ–ª–≥ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã
        total_participants = len(selected_participant_telegram_ids)
        share_per_participant = amount / total_participants
        
        allocations = {}
        for participant_id in opposite_group_participants:
            allocations[participant_id] = share_per_participant
        
        return allocations

    @classmethod
    def calculate_family_split(cls, db: Session, amount: float, 
                             payer_telegram_id: int) -> Dict[int, float]:
        """Calculate split for '–ó–∞ –¥—Ä—É–≥—É—é —Å–µ–º—å—é' - entire amount goes to opposite group"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–ª–∞—Ç–µ–ª—å—â–∏–∫
        if payer_telegram_id in cls.GROUP_1_IDS:
            # –ü–ª–∞—Ç–µ–ª—å—â–∏–∫ –∏–∑ –≥—Ä—É–ø–ø—ã 1 (–°–µ–Ω—è + –î–∞—à–∞), –≤–µ—Å—å –¥–æ–ª–≥ –Ω–∞ –≥—Ä—É–ø–ø—É 2
            target_group_ids = cls.GROUP_2_IDS
        else:
            # –ü–ª–∞—Ç–µ–ª—å—â–∏–∫ –∏–∑ –≥—Ä—É–ø–ø—ã 2 (–î–∏–º–∞ + –ö–∞—Ç—è + –ú–∏—à–∞), –≤–µ—Å—å –¥–æ–ª–≥ –Ω–∞ –≥—Ä—É–ø–ø—É 1
            target_group_ids = cls.GROUP_1_IDS
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
        target_users = db.query(User).filter(
            User.telegram_id.in_(target_group_ids)
        ).all()
        
        if not target_users:
            return {}
        
        # –î–µ–ª–∏–º —Å—É–º–º—É –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –≤—Å–µ–º–∏ –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ
        share_per_user = amount / len(target_users)
        allocations = {}
        for user in target_users:
            allocations[user.id] = share_per_user
        
        return allocations

    @classmethod
    def get_split_description(cls, split_type: str, selected_participants: List[str] = None) -> str:
        """Get description for split type"""
        
        if split_type == "participants" and selected_participants:
            participant_names = ", ".join(selected_participants)
            return f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {participant_names}"
        elif split_type == "split_families":
            return "–ó–∞ –¥—Ä—É–≥—É—é —Å–µ–º—å—é (–±–µ–∑ –º–æ–µ–π –≥—Ä—É–ø–ø—ã)"
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"

    @classmethod
    def get_participant_selection_text(cls, selected_participants: Set[int], db: Session) -> str:
        """Get text showing currently selected participants"""
        if not selected_participants:
            return "üë• –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–∞—Å—Ö–æ–¥–∞:\n\n–ù–∏–∫—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω"
        
        participant_names = []
        for user_id in selected_participants:
            user = db.query(User).filter(User.id == user_id).first()
            if user:
                name = cls.get_user_name(user)
                participant_names.append(f"‚úÖ {name}")
        
        text = "üë• –í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n\n"
        text += "\n".join(participant_names)
        text += f"\n\n–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(selected_participants)}"
        
        return text
