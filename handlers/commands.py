"""
Command handlers
"""
from telegram import Update
from telegram.ext import ContextTypes
from sqlalchemy.orm import Session
from db import get_db
from handlers.base import BaseHandler
from models import ExchangeRate, Currency, ExpenseCategory, User, Profile
from services.expense_service import ExpenseService
from services.flexible_split import FlexibleSplitService
from utils.texts import get_category_name, get_currency_name, format_amount
from datetime import datetime
import re

async def set_rate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /set_rate command"""
    if not context.args or len(context.args) != 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_rate EUR 11.30"
        )
        return
    
    currency_str = context.args[0].upper()
    rate_str = context.args[1]
    
    # Validate currency
    try:
        currency = Currency(currency_str)
    except ValueError:
        await update.message.reply_text(
            f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞: {currency_str}\n\n"
            f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: {', '.join([c.value for c in Currency])}"
        )
        return
    
    # Validate rate
    rate = BaseHandler.validate_exchange_rate(rate_str)
    if rate is None:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É—Ä—Å–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 11.30"
        )
        return
    
    # Get database session
    db = next(get_db())
    
    try:
        # Invalidate previous rates
        db.query(ExchangeRate).filter(
            ExchangeRate.from_currency == currency,
            ExchangeRate.to_currency == Currency.SEK,
            ExchangeRate.valid_until.is_(None)
        ).update({"valid_until": datetime.utcnow()})
        
        # Create new rate
        new_rate = ExchangeRate(
            from_currency=currency,
            to_currency=Currency.SEK,
            rate=rate,
            valid_from=datetime.utcnow()
        )
        
        db.add(new_rate)
        db.commit()
        
        await update.message.reply_text(
            f"‚úÖ –ö—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            f"1 {currency.value} = {rate:.2f} SEK\n\n"
            f"–ö—É—Ä—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å {new_rate.valid_from.strftime('%d.%m.%Y %H:%M')}"
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {str(e)}")
    finally:
        db.close()

async def addexpence_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /addexpence command with parameters: currency,amount,category,custom_name,payer_name"""
    if not context.args or len(context.args) < 4:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addexpence –≤–∞–ª—é—Ç–∞ —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–º—è_–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ [–æ–ø–∏—Å–∞–Ω–∏–µ]\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /addexpence EUR 110 –ø—Ä–æ–¥—É–∫—Ç—ã –¥–∏–º–∞\n"
            "‚Ä¢ /addexpence EUR 110 –¥—Ä—É–≥–æ–µ –µ–¥–∞ –Ω–∞ –∑–∞–ø—Ä–∞–≤–∫–µ –¥–∏–º–∞\n"
            "‚Ä¢ /addexpence SEK 500 –∞–ª–∫–æ–≥–æ–ª—å –∫–∞—Ç—è\n\n"
            "–í–∞–ª—é—Ç—ã: SEK, EUR, RUB\n"
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: –ø—Ä–æ–¥—É–∫—Ç—ã, –∞–ª–∫–æ–≥–æ–ª—å, –¥—Ä—É–≥–æ–µ\n"
            "–ò–º–µ–Ω–∞: –¥–∏–º–∞, –∫–∞—Ç—è, —Å–µ–Ω—è, –¥–∞—à–∞, –º–∏—à–∞"
        )
        return
    
    # Parse arguments
    currency_str = context.args[0].upper()
    amount_str = context.args[1]
    category_str = context.args[2].lower()
    payer_name = context.args[3].lower()
    custom_name = context.args[4] if len(context.args) > 4 else None
    
    # Validate currency
    try:
        currency = Currency(currency_str)
    except ValueError:
        await update.message.reply_text(
            f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞: {currency_str}\n\n"
            f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: {', '.join([c.value for c in Currency])}"
        )
        return
    
    # Validate amount
    amount = BaseHandler.validate_amount(amount_str)
    if amount is None:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 110.50)"
        )
        return
    
    # Validate category
    category_map = {
        "–ø—Ä–æ–¥—É–∫—Ç—ã": ExpenseCategory.FOOD,
        "–∞–ª–∫–æ–≥–æ–ª—å": ExpenseCategory.ALCOHOL,
        "–¥—Ä—É–≥–æ–µ": ExpenseCategory.OTHER
    }
    
    if category_str not in category_map:
        await update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_str}\n\n"
            f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(category_map.keys())}"
        )
        return
    
    category = category_map[category_str]
    
    # Validate custom name for "–¥—Ä—É–≥–æ–µ" category
    if category == ExpenseCategory.OTHER and not custom_name:
        await update.message.reply_text(
            "‚ùå –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–¥—Ä—É–≥–æ–µ' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.\n\n"
            "–ü—Ä–∏–º–µ—Ä: /addexpence EUR 110 –¥—Ä—É–≥–æ–µ –µ–¥–∞ –Ω–∞ –∑–∞–ø—Ä–∞–≤–∫–µ –¥–∏–º–∞"
        )
        return
    
    # Map payer names to telegram IDs
    payer_map = {
        "–¥–∏–º–∞": 350653235,
        "–∫–∞—Ç—è": 252901018,
        "—Å–µ–Ω—è": 804085588,
        "–¥–∞—à–∞": 916228993,
        "–º–∏—à–∞": 6379711500
    }
    
    if payer_name not in payer_map:
        await update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞: {payer_name}\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–º–µ–Ω–∞: {', '.join(payer_map.keys())}"
        )
        return
    
    payer_telegram_id = payer_map[payer_name]
    
    # Get database session
    db = next(get_db())
    
    try:
        # Get or create payer user
        payer_user = db.query(User).filter(User.telegram_id == payer_telegram_id).first()
        if not payer_user:
            await update.message.reply_text(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {payer_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –±–æ—Ç—É —Å –ø–æ–º–æ—â—å—é /start"
            )
            return
        
        # Get default profile (Home)
        profile = db.query(Profile).filter(Profile.name == "Home").first()
        if not profile:
            # Create default profile if it doesn't exist
            profile = Profile(name="Home", is_default=True)
            db.add(profile)
            db.commit()
            db.refresh(profile)
        
        # Create expense with special splitting logic
        from services.special_split import calculate_special_split
        
        # Calculate allocations based on category
        allocations = calculate_special_split(db, amount, category, profile.id)
        
        # Create expense
        expense = ExpenseService.create_expense(
            db=db,
            amount=amount,
            currency=currency,
            category=category,
            payer_id=payer_user.id,
            profile_id=profile.id,
            allocations=allocations,
            custom_category_name=custom_name
        )
        
        # Show success message
        text = f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        if custom_name:
            text += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {get_category_name(category)}: {custom_name}\n"
        else:
            text += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {get_category_name(category)}\n"
        text += f"üí± –í–∞–ª—é—Ç–∞: {get_currency_name(currency)}\n"
        text += f"üí∞ –°—É–º–º–∞: {format_amount(amount, currency)}\n"
        text += f"üí≥ –û–ø–ª–∞—Ç–∏–ª: {BaseHandler.get_user_name(payer_user)}"
        
        await update.message.reply_text(text)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞: {str(e)}")
    finally:
        db.close()

async def addexpence_advanced_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /addexpence_advanced command with participant selection"""
    if not context.args or len(context.args) < 4:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addexpence_advanced –≤–∞–ª—é—Ç–∞ —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–º—è_–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∏ [–æ–ø–∏—Å–∞–Ω–∏–µ]\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /addexpence_advanced EUR 110 –ø—Ä–æ–¥—É–∫—Ç—ã –¥–∏–º–∞ –¥–∏–º–∞,–∫–∞—Ç—è\n"
            "‚Ä¢ /addexpence_advanced EUR 110 –¥—Ä—É–≥–æ–µ –µ–¥–∞ –Ω–∞ –∑–∞–ø—Ä–∞–≤–∫–µ –¥–∏–º–∞ –¥–∏–º–∞,—Å–µ–Ω—è,–¥–∞—à–∞\n"
            "‚Ä¢ /addexpence_advanced SEK 500 –∞–ª–∫–æ–≥–æ–ª—å –∫–∞—Ç—è –∫–∞—Ç—è,–º–∏—à–∞\n\n"
            "–í–∞–ª—é—Ç—ã: SEK, EUR, RUB\n"
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: –ø—Ä–æ–¥—É–∫—Ç—ã, –∞–ª–∫–æ–≥–æ–ª—å, –¥—Ä—É–≥–æ–µ\n"
            "–ò–º–µ–Ω–∞: –¥–∏–º–∞, –∫–∞—Ç—è, —Å–µ–Ω—è, –¥–∞—à–∞, –º–∏—à–∞\n"
            "–£—á–∞—Å—Ç–Ω–∏–∫–∏: —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–º–∏–Ω–∏–º—É–º 2 —á–µ–ª–æ–≤–µ–∫–∞)"
        )
        return
    
    # Parse arguments
    currency_str = context.args[0].upper()
    amount_str = context.args[1]
    category_str = context.args[2].lower()
    payer_name = context.args[3].lower()
    participants_str = context.args[4].lower()
    custom_name = context.args[5] if len(context.args) > 5 else None
    
    # Validate currency
    try:
        currency = Currency(currency_str)
    except ValueError:
        await update.message.reply_text(
            f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞: {currency_str}\n\n"
            f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: {', '.join([c.value for c in Currency])}"
        )
        return
    
    # Validate amount
    amount = BaseHandler.validate_amount(amount_str)
    if amount is None:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 110.50)"
        )
        return
    
    # Validate category
    category_map = {
        "–ø—Ä–æ–¥—É–∫—Ç—ã": ExpenseCategory.FOOD,
        "–∞–ª–∫–æ–≥–æ–ª—å": ExpenseCategory.ALCOHOL,
        "–¥—Ä—É–≥–æ–µ": ExpenseCategory.OTHER
    }
    
    if category_str not in category_map:
        await update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_str}\n\n"
            f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(category_map.keys())}"
        )
        return
    
    category = category_map[category_str]
    
    # Validate custom name for "–¥—Ä—É–≥–æ–µ" category
    if category == ExpenseCategory.OTHER and not custom_name:
        await update.message.reply_text(
            "‚ùå –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–¥—Ä—É–≥–æ–µ' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.\n\n"
            "–ü—Ä–∏–º–µ—Ä: /addexpence_advanced EUR 110 –¥—Ä—É–≥–æ–µ –µ–¥–∞ –Ω–∞ –∑–∞–ø—Ä–∞–≤–∫–µ –¥–∏–º–∞ –¥–∏–º–∞,–∫–∞—Ç—è"
        )
        return
    
    # Map names to telegram IDs
    name_map = {
        "–¥–∏–º–∞": 350653235,
        "–∫–∞—Ç—è": 252901018,
        "—Å–µ–Ω—è": 804085588,
        "–¥–∞—à–∞": 916228993,
        "–º–∏—à–∞": 6379711500
    }
    
    # Validate payer
    if payer_name not in name_map:
        await update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞: {payer_name}\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–º–µ–Ω–∞: {', '.join(name_map.keys())}"
        )
        return
    
    payer_telegram_id = name_map[payer_name]
    
    # Parse and validate participants
    participant_names = [name.strip() for name in participants_str.split(',')]
    if len(participant_names) < 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"
        )
        return
    
    # Validate all participant names
    invalid_names = [name for name in participant_names if name not in name_map]
    if invalid_names:
        await update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {', '.join(invalid_names)}\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–º–µ–Ω–∞: {', '.join(name_map.keys())}"
        )
        return
    
    # Convert to telegram IDs
    participant_telegram_ids = set(name_map[name] for name in participant_names)
    
    # Check that participants are from different groups (same logic as in expense.py)
    group_1_selected = any(telegram_id in FlexibleSplitService.GROUP_1_IDS for telegram_id in participant_telegram_ids)
    group_2_selected = any(telegram_id in FlexibleSplitService.GROUP_2_IDS for telegram_id in participant_telegram_ids)
    
    only_group_1 = group_1_selected and not group_2_selected
    only_group_2 = group_2_selected and not group_1_selected
    
    if only_group_1 or only_group_2:
        if only_group_1:
            group_name = "–î–∞—à–∞ + –°–µ–Ω—è"
        else:
            group_name = "–î–∏–º–∞ + –ö–∞—Ç—è + –ú–∏—à–∞"
        
        await update.message.reply_text(
            f"‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã '{group_name}'. –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –†–ê–ó–ù–´–• –≥—Ä—É–ø–ø!"
        )
        return
    
    # Get database session
    db = next(get_db())
    
    try:
        # Get or create payer user
        payer_user = db.query(User).filter(User.telegram_id == payer_telegram_id).first()
        if not payer_user:
            await update.message.reply_text(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {payer_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –±–æ—Ç—É —Å –ø–æ–º–æ—â—å—é /start"
            )
            return
        
        # Get default profile (Home)
        profile = db.query(Profile).filter(Profile.name == "Home").first()
        if not profile:
            # Create default profile if it doesn't exist
            profile = Profile(name="Home", is_default=True)
            db.add(profile)
            db.commit()
            db.refresh(profile)
        
        # Create expense with participant split logic
        allocations = FlexibleSplitService.calculate_participant_split(
            db, amount, participant_telegram_ids, payer_telegram_id
        )
        
        # Create expense
        expense = ExpenseService.create_expense(
            db=db,
            amount=amount,
            currency=currency,
            category=category,
            payer_id=payer_user.id,
            profile_id=profile.id,
            allocations=allocations,
            custom_category_name=custom_name,
            split_type="participants",
            selected_participants=participant_telegram_ids
        )
        
        # Show success message
        text = f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        if custom_name:
            text += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {get_category_name(category)}: {custom_name}\n"
        else:
            text += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {get_category_name(category)}\n"
        text += f"üí± –í–∞–ª—é—Ç–∞: {get_currency_name(currency)}\n"
        text += f"üí∞ –°—É–º–º–∞: {format_amount(amount, currency)}\n"
        text += f"üí≥ –û–ø–ª–∞—Ç–∏–ª: {BaseHandler.get_user_name(payer_user)}\n"
        text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(participant_names)}"
        
        await update.message.reply_text(text)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞: {str(e)}")
    finally:
        db.close()
