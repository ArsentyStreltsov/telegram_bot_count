"""
Start command handler
"""
from telegram import Update
from telegram.ext import ContextTypes
from sqlalchemy.orm import Session
from db import get_db
from handlers.base import BaseHandler
from utils.keyboards import main_menu_keyboard
from utils.texts import get_welcome_message
from utils.access_control import AccessControl, require_access, require_access_for_callback
from models import User, Profile, ProfileMember

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command"""
    # Check access first
    if not AccessControl.check_access(update, context):
        AccessControl.log_access_attempt(update, context)
        await AccessControl.deny_access_message(update, context)
        return
    
    # Get database session
    db = next(get_db())
    
    try:
        # Get or create user
        user = BaseHandler.get_or_create_user(db, update.effective_user)
        user_name = BaseHandler.get_user_name(user)
        
        # Send welcome message with main menu
        welcome_text = get_welcome_message(user_name)
        keyboard = main_menu_keyboard()
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        )
    finally:
        db.close()

@require_access_for_callback
async def main_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle main menu callback"""
    query = update.callback_query
    await query.answer()
    
    # Get database session
    db = next(get_db())
    
    try:
        # Get or create user
        user = BaseHandler.get_or_create_user(db, update.effective_user)
        user_name = BaseHandler.get_user_name(user)
        
        # Send main menu
        welcome_text = get_welcome_message(user_name)
        keyboard = main_menu_keyboard()
        
        await query.edit_message_text(
            welcome_text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        )
    finally:
        db.close()

@require_access
async def shopping_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /shopping command"""
    from utils.keyboards import shopping_actions_keyboard
    
    text = "üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = shopping_actions_keyboard()
    
    await update.message.reply_text(text, reply_markup=keyboard)

@require_access
async def todo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /todo command"""
    from handlers.todo import todo_actions_keyboard
    
    text = "üìù –°–ø–∏—Å–æ–∫ –¥–µ–ª\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = todo_actions_keyboard()
    
    await update.message.reply_text(text, reply_markup=keyboard)

@require_access
async def expenses_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /expenses command"""
    from utils.keyboards import expenses_menu_keyboard
    
    text = "üí∞ –ú–µ–Ω—é —Ä–∞—Å—Ö–æ–¥–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = expenses_menu_keyboard()
    
    await update.message.reply_text(text, reply_markup=keyboard)

@require_access
async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /report command"""
    from handlers.reports import report_callback
    
    # Create a mock callback query for compatibility
    class MockCallbackQuery:
        def __init__(self, message):
            self.data = 'report'
            self.message = message
        
        async def answer(self):
            pass
        
        async def edit_message_text(self, text, reply_markup=None):
            await self.message.reply_text(text, reply_markup=reply_markup)
    
    # Create mock update with callback_query
    mock_update = type('MockUpdate', (), {
        'callback_query': MockCallbackQuery(update.message),
        'effective_user': update.effective_user
    })()
    
    await report_callback(mock_update, context)

@require_access
async def balances_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /balances command - show group balances"""
    from services.group_balance import GroupBalanceService
    
    db = next(get_db())
    try:
        report = GroupBalanceService.get_detailed_balance_report(db)
        await update.message.reply_text(report)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –≥—Ä—É–ø–ø: {str(e)}")
    finally:
        db.close()

@require_access
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /help command"""
    from utils.texts import get_help_message
    
    help_text = get_help_message()
    
    await update.message.reply_text(help_text)

@require_access
async def update_commands_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /update_commands command - force update bot commands"""
    try:
        # Force update bot commands
        from telegram import BotCommand
        
        commands = [
            BotCommand("start", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("shopping", "üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"),
            BotCommand("expenses", "üí∞ –†–∞—Å—Ö–æ–¥—ã"),
            BotCommand("report", "üìä –û—Ç—á–µ—Ç"),
            BotCommand("balances", "üí≥ –ë–∞–ª–∞–Ω—Å—ã"),
            BotCommand("group_balances", "üë• –ë–∞–ª–∞–Ω—Å—ã –≥—Ä—É–ø–ø"),
            BotCommand("set_rate", "üí± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã"),
            BotCommand("help", "‚ùì –°–ø—Ä–∞–≤–∫–∞"),
            BotCommand("update_commands", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã")
        ]
        
        await context.bot.set_my_commands(commands)
        
        text = "‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
        text += "üì± –¢–µ–ø–µ—Ä—å –≤ –º–µ–Ω—é Telegram –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è:\n"
        for cmd in commands:
            text += f"‚Ä¢ /{cmd.command} - {cmd.description}\n"
        
        await update.message.reply_text(text)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {str(e)}")

@require_access
async def group_balances_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /group_balances command - show group balances"""
    from services.group_balance import GroupBalanceService
    
    db = next(get_db())
    try:
        report = GroupBalanceService.get_detailed_balance_report(db)
        await update.message.reply_text(report)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –≥—Ä—É–ø–ø: {str(e)}")
    finally:
        db.close()

@require_access
async def db_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /db_info command - show database information"""
    db = next(get_db())
    
    try:
        # Get users info
        users = db.query(User).all()
        users_text = "üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ:**\n\n"
        
        for user in users:
            users_text += f"‚Ä¢ ID: {user.id}\n"
            users_text += f"  Telegram ID: {user.telegram_id}\n"
            users_text += f"  Username: @{user.username or '–Ω–µ—Ç'}\n"
            users_text += f"  –ò–º—è: {user.first_name or '–Ω–µ—Ç'}\n"
            users_text += f"  –§–∞–º–∏–ª–∏—è: {user.last_name or '–Ω–µ—Ç'}\n"
            users_text += f"  –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            users_text += f"  –ê–¥–º–∏–Ω: {'–î–∞' if user.is_admin else '–ù–µ—Ç'}\n\n"
        
        # Get profiles info
        profiles = db.query(Profile).all()
        profiles_text = "üè† **–ü—Ä–æ—Ñ–∏–ª–∏:**\n\n"
        
        for profile in profiles:
            profiles_text += f"‚Ä¢ ID: {profile.id}\n"
            profiles_text += f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {profile.name}\n"
            profiles_text += f"  –û–ø–∏—Å–∞–Ω–∏–µ: {profile.description or '–Ω–µ—Ç'}\n"
            profiles_text += f"  –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {'–î–∞' if profile.is_default else '–ù–µ—Ç'}\n"
            profiles_text += f"  –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {profile.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            
            # Get profile members
            members = db.query(ProfileMember).filter(ProfileMember.profile_id == profile.id).all()
            if members:
                profiles_text += "  üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
                for member in members:
                    member_user = db.query(User).filter(User.id == member.user_id).first()
                    if member_user:
                        profiles_text += f"    - {member_user.first_name or member_user.username} (–≤–µ—Å: {member.weight})\n"
                profiles_text += "\n"
        
        # Get expenses count
        from models import Expense
        expenses_count = db.query(Expense).count()
        expenses_text = f"üí∞ **–†–∞—Å—Ö–æ–¥—ã:** {expenses_count} –∑–∞–ø–∏—Å–µ–π\n\n"
        
        # Combine all info
        full_text = users_text + profiles_text + expenses_text
        
        # Split if too long
        if len(full_text) > 4000:
            await update.message.reply_text(users_text)
            await update.message.reply_text(profiles_text)
            await update.message.reply_text(expenses_text)
        else:
            await update.message.reply_text(full_text)
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
    finally:
        db.close()
