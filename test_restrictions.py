#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –∑–∞–¥–∞–Ω–∏—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from datetime import date, timedelta
from services.duty_service import DutyService
from models import DutyTask, DutySchedule, DutyTaskType, User
from db import init_db, get_db

def test_task_restrictions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∑–∞–¥–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∑–∞–¥–∞–Ω–∏—è")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    init_db()
    db = next(get_db())
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = db.query(User).all()
    print(f"\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:")
    for user in users:
        name = user.first_name or user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        print(f"  - {name} (ID: {user.id})")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏
    tasks = db.query(DutyTask).all()
    print(f"\nüìã –ó–∞–¥–∞—á–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:")
    for task in tasks:
        print(f"  - {task.name}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:")
    
    # –ù–∞–π–¥–µ–º –∑–∞–¥–∞—á–∏
    garbage_task = db.query(DutyTask).filter(DutyTask.name.like("%–º—É—Å–æ—Ä%")).first()
    floor_tasks = db.query(DutyTask).filter(
        DutyTask.name.like("%–ø–æ–ª—ã%") | DutyTask.name.like("%–ø—ã–ª–µ—Å–æ—Å%")
    ).all()
    
    if garbage_task:
        print(f"\nüóëÔ∏è –ó–∞–¥–∞—á–∞: {garbage_task.name}")
        for user in users:
            name = user.first_name or user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            can_do = DutyService._can_user_do_task(user, garbage_task)
            status = "‚úÖ" if can_do else "‚ùå"
            print(f"  {status} {name}: {'–º–æ–∂–µ—Ç' if can_do else '–Ω–µ –º–æ–∂–µ—Ç'}")
    
    for task in floor_tasks:
        print(f"\nüè† –ó–∞–¥–∞—á–∞: {task.name}")
        for user in users:
            name = user.first_name or user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            can_do = DutyService._can_user_do_task(user, task)
            status = "‚úÖ" if can_do else "‚ùå"
            print(f"  {status} {name}: {'–º–æ–∂–µ—Ç' if can_do else '–Ω–µ –º–æ–∂–µ—Ç'}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    print(f"\nüìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π...")
    schedules = DutyService.generate_schedule_for_month(db, 2024, 9)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    violations = []
    for date_str, duties in schedules.items():
        for duty in duties:
            if not DutyService._can_user_do_task(duty.assigned_user, duty.task):
                user_name = duty.assigned_user.first_name or duty.assigned_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                violations.append(f"{date_str}: {user_name} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ {duty.task.name}")
    
    if violations:
        print(f"\n‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:")
        for violation in violations:
            print(f"  - {violation}")
    else:
        print(f"\n‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–æ–±–ª—é–¥–µ–Ω—ã! –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞–Ω–∏—è–º
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π:")
    task_stats = {}
    for date_str, duties in schedules.items():
        for duty in duties:
            task_name = duty.task.name
            user_name = duty.assigned_user.first_name or duty.assigned_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if task_name not in task_stats:
                task_stats[task_name] = []
            task_stats[task_name].append(user_name)
    
    for task_name, assignees in task_stats.items():
        print(f"\nüìã {task_name}:")
        for assignee in assignees:
            print(f"  - {assignee}")
    
    db.close()
    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    test_task_restrictions()
