#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞–Ω–∏–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from datetime import date, timedelta
from services.duty_service import DutyService
from models import DutyTask, DutySchedule, DutyTaskType, User
from db import init_db, get_db

def test_task_sorting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∑–∞–¥–∞–Ω–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∑–∞–¥–∞–Ω–∏–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    init_db()
    db = next(get_db())
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user = db.query(User).first()
    if not user:
        print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    test_tasks = [
        "–£–±—Ä–∞—Ç—å –ø–æ—Å—É–¥—É –ø–æ—Å–ª–µ —É–∂–∏–Ω–∞",
        "–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫", 
        "–£–±—Ä–∞—Ç—å –ø–æ—Å—É–¥—É –ø–æ—Å–ª–µ –æ–±–µ–¥–∞",
        "–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –æ–±–µ–¥",
        "–£–±—Ä–∞—Ç—å –ø–æ—Å—É–¥—É –ø–æ—Å–ª–µ –∑–∞–≤—Ç—Ä–∞–∫–∞",
        "–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —É–∂–∏–Ω",
        "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏",
        "–£–±—Ä–∞—Ç—å —Ç—É–∞–ª–µ—Ç—ã",
        "–ü–æ–º—ã—Ç—å –ø–æ–ª—ã"
    ]
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ DutySchedule –æ–±—ä–µ–∫—Ç—ã
    test_duties = []
    for i, task_name in enumerate(test_tasks):
        task = db.query(DutyTask).filter(DutyTask.name == task_name).first()
        if task:
            duty = DutySchedule()
            duty.task = task
            duty.assigned_user = user
            duty.date = date.today()
            duty.is_completed = False
            test_duties.append(duty)
    
    print(f"\nüìã –ò—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∑–∞–¥–∞–Ω–∏–π:")
    for i, duty in enumerate(test_duties, 1):
        print(f"  {i}. {duty.task.name}")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    from handlers.duty import sort_duties_by_meal_order
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º
    sorted_duties = sort_duties_by_meal_order(test_duties)
    
    print(f"\nüìã –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∑–∞–¥–∞–Ω–∏–π:")
    for i, duty in enumerate(sorted_duties, 1):
        print(f"  {i}. {duty.task.name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    expected_order = [
        "–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–≤—Ç—Ä–∞–∫",
        "–£–±—Ä–∞—Ç—å –ø–æ—Å—É–¥—É –ø–æ—Å–ª–µ –∑–∞–≤—Ç—Ä–∞–∫–∞", 
        "–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –æ–±–µ–¥",
        "–£–±—Ä–∞—Ç—å –ø–æ—Å—É–¥—É –ø–æ—Å–ª–µ –æ–±–µ–¥–∞",
        "–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —É–∂–∏–Ω",
        "–£–±—Ä–∞—Ç—å –ø–æ—Å—É–¥—É –ø–æ—Å–ª–µ —É–∂–∏–Ω–∞",
        "–ü–æ–º—ã—Ç—å –ø–æ–ª—ã",
        "–£–±—Ä–∞—Ç—å —Ç—É–∞–ª–µ—Ç—ã", 
        "–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏"
    ]
    
    print(f"\n‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫:")
    for i, task_name in enumerate(expected_order, 1):
        print(f"  {i}. {task_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    is_correct = True
    for i, duty in enumerate(sorted_duties):
        if i < len(expected_order) and duty.task.name != expected_order[i]:
            is_correct = False
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i+1}: –æ–∂–∏–¥–∞–ª–æ—Å—å '{expected_order[i]}', –ø–æ–ª—É—á–µ–Ω–æ '{duty.task.name}'")
    
    if is_correct:
        print(f"\nüéâ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        print(f"\n‚ùå –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    
    db.close()

if __name__ == "__main__":
    test_task_sorting()
